{"version":3,"sources":["ListItems.js","pagination.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","type","id","key","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","PaginationLink","pageChange","handleChange","event","console","log","initialEntries","initialIndex","location","URLSearchParams","search","Pagination","count","library","add","faTrash","App","state","usersList","isLoaded","currentItem","pagination","start","addItem","bind","handleInput","UserList","preventDefault","newItem","this","setState","Date","now","filteredItems","filter","pageNo","fetch","then","data","json","res","length","onSubmit","placeholder","style","alignItems","slice","user","src","avatar","first_name","last_name","email","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2925a241.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n     <p>\r\n         <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\r\n             props.setUpdate(e.target.value,item.key)}}/>\r\n        <span>\r\n       \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.deleteItem(item.key)\r\n        }} icon=\"trash\" />\r\n        </span>\r\n     </p>\r\n     \r\n    </div>})\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    \r\n    </div>;\r\n  }\r\n\r\n  export default ListItems;","import * as React from 'react';\nimport { MemoryRouter, Route } from 'react-router-dom';\nimport Pagination from '@mui/material/Pagination';\n\nexport default function PaginationLink({\n    pageChange\n}) {\n    \n    const handleChange = (event, value) => {\n        console.log(\"value\",value)\n        pageChange(value)\n        };\n  return (\n    <MemoryRouter initialEntries={['/home']} initialIndex={0}>\n      <Route>\n        {({ location }) => {\n          const query = new URLSearchParams(location.search);\n          return (\n            <Pagination\n              count={2}\n              onChange={handleChange} \n            />\n          );\n        }}\n      </Route>\n    </MemoryRouter>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport ListItems from './ListItems'\nimport Pagination from './pagination'\nlibrary.add(faTrash)\n\nclass App extends React.Component {\n  \n  constructor(props){\n  \n    super(props);\n  \n    this.state = {\n      items:[],\n      usersList:[],\n      isLoaded:false,\n      currentItem:{\n        text:'',\n        key:''\n      },\n      pagination:{\n         start:0,\n      }\n\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.UserList = this.UserList.bind(this);\n\n  }\n   \n  \n \n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n  setUpdate(text,key){\n    console.log(\"items:\"+this.state.items);\n    const items = this.state.items;\n    items.map(item=>{      \n      if(item.key===key){\n        console.log(item.key +\"    \"+key)\n        item.text= text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n\n  componentDidMount() {\n    this.UserList(1);\n  }\n\n  UserList(pageNo) {\n    console.log(\"pagenO app.js\",pageNo)\n  fetch(`https://reqres.in/api/users?page=${pageNo}`).then(data => data.json()).then(res =>{\n     this.setState(() =>{\n       const ar = res.data\n       return {\n        usersList: ar         \n       }\n     })\n    })\n  }\n\n render(){\n  const {isLoaded, usersList}=this.state;\n  console.log(\"userList\",this.state.usersList.length)\n\n  if(isLoaded){\n     return <div>Loading...</div>\n  }\n\n  else{\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\"  onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter to add Task\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n            <button type=\"submit\">Add</button>\n          </form>\n          <p>{this.state.items.text}</p>\n          \n            <ListItems style={{ alignItems:'left' }} items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n          \n        </header>\n     \n\n    <div className=\"container py-4\">\n        <div className=\"row\">\n          {usersList.slice(this.state.pagination.start,this.state.usersList.length).map((user) => (\n            <div className=\"col-md-3 mb-3\" key={user.id}>\n              <div className=\"card\">\n                <div className=\"card-body\">\n                <img className=\"user\" src={user.avatar}/>\n          <p>Name:  {user.first_name} {user.last_name}</p>\n          <h5>Email:{user.email}</h5>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <Pagination pageChange={this.UserList}/>\n      </div>\n\n      </div>\n    );\n  }\n \n }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}